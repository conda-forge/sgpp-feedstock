diff --git a/combigrid/src/sgpp/combigrid/operation/multidim/sparsegrid/LTwoScalarProductHashMapNakBsplineBoundaryCombigrid.cpp b/combigrid/src/sgpp/combigrid/operation/multidim/sparsegrid/LTwoScalarProductHashMapNakBsplineBoundaryCombigrid.cpp
index a6ee2cd..366a51b 100644
--- a/combigrid/src/sgpp/combigrid/operation/multidim/sparsegrid/LTwoScalarProductHashMapNakBsplineBoundaryCombigrid.cpp
+++ b/combigrid/src/sgpp/combigrid/operation/multidim/sparsegrid/LTwoScalarProductHashMapNakBsplineBoundaryCombigrid.cpp
@@ -6,7 +6,10 @@
 #include <sgpp/combigrid/operation/multidim/sparsegrid/LTwoScalarProductHashMapNakBsplineBoundaryCombigrid.hpp>
 #include <sgpp/combigrid/threading/ThreadPool.hpp>
 
+#ifdef _OPENMP
 #include <omp.h>
+#endif
+
 #include <algorithm>
 #include <map>
 #include <vector>
diff --git a/combigrid/src/sgpp/combigrid/utils/DataVectorHashing.hpp b/combigrid/src/sgpp/combigrid/utils/DataVectorHashing.hpp
index 168283c..c0cccc0 100644
--- a/combigrid/src/sgpp/combigrid/utils/DataVectorHashing.hpp
+++ b/combigrid/src/sgpp/combigrid/utils/DataVectorHashing.hpp
@@ -8,6 +8,7 @@
 #include <sgpp/base/datatypes/DataVector.hpp>
 
 #include <vector>
+#include <functional>
 
 namespace sgpp {
 namespace combigrid {
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.cpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.cpp
index 953229c..617b4f8 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.cpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.cpp
@@ -69,8 +69,12 @@ void OperationMultiEvalModMaskStreaming::getOpenMPPartitionSegment(size_t start,
                                                                    size_t* segmentStart,
                                                                    size_t* segmentEnd,
                                                                    size_t blocksize) {
-  size_t threadCount = omp_get_num_threads();
-  size_t myThreadNum = omp_get_thread_num();
+  size_t threadCount = 1;
+  size_t myThreadNum = 0;
+#ifdef _OPENMP
+  threadCount = omp_get_num_threads();
+  myThreadNum = omp_get_thread_num();
+#endif
   getPartitionSegment(start, end, threadCount, myThreadNum, segmentStart, segmentEnd, blocksize);
 }
 
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.hpp
index 575e8c4..4f8d420 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalModMaskStreaming/OperationMultiEvalModMaskStreaming.hpp
@@ -5,7 +5,9 @@
 
 #pragma once
 
+#ifdef _OPENMP
 #include <omp.h>
+#endif
 
 #include <sgpp/base/operation/hash/OperationMultipleEval.hpp>
 #include <sgpp/base/tools/SGppStopwatch.hpp>
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.cpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.cpp
index 2685295..ece2bb2 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.cpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.cpp
@@ -68,8 +68,12 @@ void OperationMultiEvalStreaming::getPartitionSegment(size_t start, size_t end,
 void OperationMultiEvalStreaming::getOpenMPPartitionSegment(size_t start, size_t end,
                                                             size_t* segmentStart,
                                                             size_t* segmentEnd, size_t blocksize) {
-  size_t threadCount = omp_get_num_threads();
-  size_t myThreadNum = omp_get_thread_num();
+  size_t threadCount = 1;
+  size_t myThreadNum = 0;
+#ifdef _OPENMP
+  threadCount = omp_get_num_threads();
+  myThreadNum = omp_get_thread_num();
+#endif
   getPartitionSegment(start, end, threadCount, myThreadNum, segmentStart, segmentEnd, blocksize);
 }
 
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.hpp
index 5d227f5..8d32cf9 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultiEvalStreaming/OperationMultiEvalStreaming.hpp
@@ -5,7 +5,9 @@
 
 #pragma once
 
+#ifdef _OPENMP
 #include <omp.h>
+#endif
 
 #include "sgpp/base/exception/operation_exception.hpp"
 #include "sgpp/base/operation/hash/OperationMultipleEval.hpp"
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLMaskMultiPlatform/KernelMult.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLMaskMultiPlatform/KernelMult.hpp
index e1cacf2..619a112 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLMaskMultiPlatform/KernelMult.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLMaskMultiPlatform/KernelMult.hpp
@@ -13,7 +13,7 @@
 #include <string>
 #include <vector>
 
-#include "../../../../../../../base/src/sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
+#include "sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
 #include "SourceBuilderMult.hpp"
 #include "sgpp/base/opencl/OCLBufferWrapperSD.hpp"
 #include "sgpp/base/opencl/OCLManagerMultiPlatform.hpp"
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLOpt/KernelMult.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLOpt/KernelMult.hpp
index 338b5fc..a928829 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLOpt/KernelMult.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLOpt/KernelMult.hpp
@@ -11,7 +11,7 @@
 #include <string>
 #include <vector>
 
-#include "../../../../../../../base/src/sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
+#include "sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
 #include "SourceBuilderMult.hpp"
 #include "sgpp/base/opencl/OCLBufferWrapperSD.hpp"
 #include "sgpp/base/opencl/OCLManagerMultiPlatform.hpp"
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLUnified/KernelMult.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLUnified/KernelMult.hpp
index 9e52574..4928d39 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLUnified/KernelMult.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingModOCLUnified/KernelMult.hpp
@@ -13,7 +13,7 @@
 #include <string>
 #include <vector>
 
-#include "../../../../../../../base/src/sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
+#include "sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
 #include "SourceBuilderMult.hpp"
 #include "sgpp/base/opencl/OCLBufferWrapperSD.hpp"
 #include "sgpp/base/opencl/OCLManagerMultiPlatform.hpp"
diff --git a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingOCLMultiPlatform/KernelMult.hpp b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingOCLMultiPlatform/KernelMult.hpp
index 41d9ea8..47951ef 100644
--- a/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingOCLMultiPlatform/KernelMult.hpp
+++ b/datadriven/src/sgpp/datadriven/operation/hash/OperationMultipleEvalStreamingOCLMultiPlatform/KernelMult.hpp
@@ -12,7 +12,7 @@
 #include <string>
 #include <vector>
 
-#include "../../../../../../../base/src/sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
+#include "sgpp/base/tools/QueueLoadBalancerOpenMP.hpp"
 #include "SourceBuilderMult.hpp"
 #include "sgpp/base/opencl/OCLBufferWrapperSD.hpp"
 #include "sgpp/base/opencl/OCLManagerMultiPlatform.hpp"
diff --git a/optimization/build/pysgpp/optimization.i b/optimization/build/pysgpp/optimization.i
index 8602151..5ac783e 100755
--- a/optimization/build/pysgpp/optimization.i
+++ b/optimization/build/pysgpp/optimization.i
@@ -4,6 +4,14 @@
 // sgpp.sparsegrids.org
 
 // to disable OpenMP multi-threading within Python
+%{
+#ifndef _OPENMP
+static void omp_set_num_threads(int num_threads)
+{
+}
+#endif
+%}
+
 void omp_set_num_threads(int num_threads);
 %init %{
     omp_set_num_threads(1);
diff --git a/optimization/src/sgpp/optimization/operation/hash/OperationMultipleHierarchisationLinearClenshawCurtis.hpp b/optimization/src/sgpp/optimization/operation/hash/OperationMultipleHierarchisationLinearClenshawCurtis.hpp
index 3a37754..f05f37b 100644
--- a/optimization/src/sgpp/optimization/operation/hash/OperationMultipleHierarchisationLinearClenshawCurtis.hpp
+++ b/optimization/src/sgpp/optimization/operation/hash/OperationMultipleHierarchisationLinearClenshawCurtis.hpp
@@ -10,7 +10,7 @@
 
 #include <sgpp/optimization/operation/hash/OperationMultipleHierarchisation.hpp>
 #include <sgpp/base/datatypes/DataVector.hpp>
-#include "../../../../../../base/src/sgpp/base/grid/type/LinearClenshawCurtisBoundaryGrid.hpp"
+#include <sgpp/base/grid/type/LinearClenshawCurtisBoundaryGrid.hpp>
 
 namespace sgpp {
 namespace optimization {
diff --git a/pysgpp/pysgpp.i b/pysgpp/pysgpp.i
index 0c53cd2..f4d2874 100644
--- a/pysgpp/pysgpp.i
+++ b/pysgpp/pysgpp.i
@@ -46,7 +46,9 @@
 }
 
 %{
+#ifdef _OPENMP
 #include <omp.h>
+#endif
 %}
 
 %{
diff --git a/site_scons/SGppConfigure.py b/site_scons/SGppConfigure.py
index 1da9dab..8953dc9 100644
--- a/site_scons/SGppConfigure.py
+++ b/site_scons/SGppConfigure.py
@@ -79,16 +79,16 @@ def doConfigure(env, moduleFolders, languageWrapperFolders):
     # the python binding (pysgpp) requires lpython and a flat namespace
     # also for the python binding, the library must be suffixed with '*.so' even
     # though it is a dynamiclib and not a bundle (see SConscript in src/pysgpp)
-    config.env.AppendUnique(LINKFLAGS=["-flat_namespace", "-undefined", "dynamic_lookup", "-lpython"])
+    config.env.AppendUnique(LINKFLAGS=["-undefined", "dynamic_lookup"])
     # The GNU assembler (GAS) is not supported in Mac OS X.
     # A solution that fixed this problem is by adding -Wa,-q to the compiler flags.
     # From the man pages for as (version 1.38):
     # -q Use the clang(1) integrated assembler instead of the GNU based system assembler.
     # Note that the CPPFLAG is exactly "-Wa,-q", where -Wa passes flags to the assembler and
     # -q is the relevant flag to make it use integrated assembler
-    config.env.AppendUnique(CPPFLAGS=["-Wa,-q"])
-    config.env.AppendUnique(CPPPATH="/usr/local/include")
-    config.env.AppendUnique(LIBPATH="/usr/local/lib")
+    #config.env.AppendUnique(CPPFLAGS=["-Wa,-q"])
+    #config.env.AppendUnique(CPPPATH="/usr/local/include")
+    #config.env.AppendUnique(LIBPATH="/usr/local/lib")
     config.env["SHLIBSUFFIX"] = ".dylib"
   elif config.env["PLATFORM"] == "cygwin":
     # required to find the static libraries compiled before the shared libraries
@@ -174,6 +174,11 @@ def doConfigure(env, moduleFolders, languageWrapperFolders):
     if not config.CheckCXXHeader("hpx/include/actions.hpp"):
       Helper.printErrorAndExit("hpx/include/actions.hpp not found, but required for HPX")
 
+  # pickup flags from env
+  if config.env["PLATFORM"] not in ["cygwin", "win32"]:
+    config.env.Append(LINKFLAGS=os.environ.get("LDFLAGS", "").split(" "))
+    config.env.Append(CPPFLAGS=os.environ.get("CXXFLAGS", "").split(" "))
+
   env = config.Finish()
 
   print("Configuration done.")
@@ -526,8 +531,8 @@ def configureClangCompiler(config):
   #    "If you are going to use optimisations turned on with gcc > 4.0 (for example -O2),
   #     ensure you also compile with -fno-strict-aliasing"
 #   if not config.env["USE_HPX"]:
-  config.env.Append(CPPFLAGS=["-fopenmp=libiomp5"])
-  config.env.Append(LINKFLAGS=["-fopenmp=libiomp5"])
+  #config.env.Append(CPPFLAGS=["-fopenmp=libiomp5"])
+  #config.env.Append(LINKFLAGS=["-fopenmp=libiomp5"])
 
   if config.env["BUILD_STATICLIB"]:
     config.env.Append(CPPFLAGS=["-D_BUILD_STATICLIB"])
